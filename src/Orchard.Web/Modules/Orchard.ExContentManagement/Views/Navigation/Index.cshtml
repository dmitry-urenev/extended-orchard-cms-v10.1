@model NavigationAdminViewModel
@using Orchard.Core.Navigation.ViewModels;
@using Orchard.Utility.Extensions;
@using Orchard.ContentManagement;
@using Orchard.ContentManagement.Aspects;
@using Orchard.ExContentManagement.Models;
@using Orchard.ExContentManagement.ViewModels;

@{
    Layout.Title = T("Navigation").ToString();
    Style.Include("navigation-admin.css");
    Style.Include("admin-ui.css");

    Script.Require("jQueryUI_Sortable").AtFoot();
    Script.Include("jquery.mjs.nestedSortable.js").AtFoot();
    Script.Include("navigation-admin.js").AtFoot();
}
<style type="text/css">
    .lang-selector {
        float: right;
    }
</style>
<div id="save-message" class="message message-Warning">@T("You need to hit \"Save All\" in order to save your changes.")</div>
<div id="display-menu-controls">
    @if (Model.Menus.Any())
    {
        using (Html.BeginForm("Index", "Navigation", FormMethod.Get, new { area = "Orchard.ExContentManagement" }))
        {
            <div>@T("Current Menu:")</div>
            <div class="menu-block bulk-actions-auto">
                <select id="menuId" name="menuId">
                    @foreach (var menu in Model.Menus)
                    {
                        @Html.SelectOption(Model.CurrentMenu.Id, menu.Id, Convert.ToString(Html.ItemDisplayText(menu)))
                    }
                </select>
                <button type="submit" class="apply-bulk-actions-auto">@T("Show")</button>
                @Html.ActionLink(T("Edit").Text, "Edit", new { controller = "Admin", area = "Contents", id = Model.CurrentMenu.Id, returnUrl = Url.Action("Index", "Navigation", new { area = "Orchard.ExContentManagement", menuId = Model.CurrentMenu.Id }) })
            </div>
        }
    }
    <div class="menu-block">
        @Html.Link(T("Add a new menu...").Text, Url.Action("Create", "Admin", new { area = "Contents", id = "Menu", returnUrl = Request.RawUrl }))
    </div>
    <div class="menu-block add-menu-item-block">
        <a href="javascript:void(0);">Add a new Menu Item</a>
        <div class="menu-items-dd">
            <ul class="menu-items-zone">
                @foreach (var descriptor in Model.MenuItemDescriptors.OrderBy(x => x.DisplayName))
                {
                    <li class="menu-item">
                        <a href="@Url.Action("CreateMenuItem", "Navigation", new { area = "Orchard.ExContentManagement", id = descriptor.Type, menuId = Model.CurrentMenu.Id, returnUrl = Request.RawUrl })">
                            <span class="title">@T(descriptor.DisplayName.CamelFriendly())</span>
                            @if (!string.IsNullOrWhiteSpace(descriptor.Description))
                            {
                                <span class="hint">@T(descriptor.Description)</span>
                            }
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>

    @if (Model.IsMultyLanguageSite && Model.CurrentMenu != null)
    {
        <div class="lang-selector bulk-actions-auto">
            @using (Html.BeginForm("Index", "Navigation", new { area = "Orchard.ExContentManagement" }, FormMethod.Get))
            {
                <span>@T("Language:")</span>
                <select id="languageSelector" name="lang">
                    @foreach (var lang in Model.AvailableCultures)
                    {
                        @Html.SelectOption(lang, Model.CurrentCulture == lang, lang)
                    }
                </select>
                @Html.Hidden("menuId", Model.CurrentMenu.Id)
                <button type="submit" class="apply-bulk-actions-auto">@T("Show")</button>
            }
        </div>
    }
</div>

@using (Html.BeginFormAntiForgeryPost())
{
    @Html.Hidden("menuId", Model.CurrentMenu.Id)
    @Html.Hidden("lang", Model.CurrentCulture)
    <div class="sections">
        <div class="primary">
            <div class="container">
                <div class="navigation-menu">
                    @if (Model.MenuItemEntries.Any())
                    {
                        @RenderItems();
                    }
                    else {
                        <h2>@T("The menu is empty")</h2>
                    }
                </div>
            </div>
        </div>
    </div>

    <fieldset class="actions">
        <button id="saveButton" type="submit" class="button">@T("Save All")</button>
    </fieldset>
}

@helper RenderLevel(Dictionary<int, List<MenuItemEntry>> lookup, int lvl, MenuItemEntry parent)
{
if (lookup.ContainsKey(lvl))
{
    var leveledItems = lookup[lvl];
    var items = leveledItems.ToList();
    if (parent != null)
    {
        items = items.Where(i => i.Position.StartsWith(parent.Position + "."))
            .OrderBy(i => i.Position, new Orchard.UI.FlatPositionComparer())
            .ToList();        
    }
    if (items.Any())
    {
        if (parent != null)
        {
                @:<ol>
            }
            foreach (var i in items)
            {
                <li class="@((i as ExMenuItemEntry).IsOriginal ? "navigation-menu-item original" : "navigation-menu-item")" data-index="@lvl">
                    @RenderMenuItem(i)
                    @RenderLevel(lookup, lvl + 1, i)
                </li>

                leveledItems.Remove(i);
            }
            if (parent != null)
            {
                @:</ol> 
            }            
        }
    }    
}

@helper RenderMenuItem(MenuItemEntry entry) {
    var idx = Model.MenuItemEntries.IndexOf(entry);

    <div>
        <h2>@entry.Text</h2>
        <span class="navigation-type">(@entry.ContentItem.TypeDefinition.DisplayName)</span>
        @if (entry.ContentItem.Has<ILocalizableAspect>())
        {
            @Display(BuildDisplay(entry.ContentItem, "NavigationAdmin").Content)
        }
        <span class="navigation-position">
            <input type="text" class="text" name="@Html.NameOf(m => m.MenuItemEntries[idx].Position)" value="@entry.Position" /></span>
        <span class="navigation-actions">
            <input type="hidden" name="@Html.NameOf(m => m.MenuItemEntries[idx].MenuItemId)" value="@entry.MenuItemId" />
            @Html.ItemEditLink(T("Edit").Text, entry.ContentItem, new { returnUrl = Request.RawUrl })@T(" | ")
            @Html.ActionLink(T("Delete").Text, "Delete", new { id = entry.MenuItemId, returnUrl = Request.RawUrl }, new { @class = "remove", itemprop = "RemoveUrl UnsafeUrl" })
        </span>
    </div>
} 

@helper RenderItems()
{
IEnumerable<MenuItemEntry> items = Model.MenuItemEntries;
Dictionary<int, List<MenuItemEntry>> levels;

    <ol>
        @do
        {
        levels = items
            .GroupBy(m => m.Position.Split('.').Length - 1)
            .OrderBy(g => g.Key)
            .ToDictionary(g => g.Key, g => g.ToList());

            if (levels.Keys.Any())
            {
             @RenderLevel(levels, levels.Keys.First(), null);
            }   

           items = levels.SelectMany(l => l.Value);

        } while (items.Any());
    </ol>
}

@using (Script.Foot())
{
    <script type="text/javascript">
        //<![CDATA[
        var leaveConfirmation = '@T("Some items where not saved.")';
        //]]>
    </script>
}
